openapi: 3.0.2
info:
  title: Artemis REST API
  version: 1.0.0
tags:
  - name: groups
    description: Group actions
  - name: repo
    description: Repository actions
  - name: report
    description: Report actions
  - name: sbom
    description: SBOM actions
  - name: search
    description: Search actions
  - name: system
    description: System actions
  - name: users
    description: User actions
  - name: whitelist
    description: Whitelist actions
paths:
  "/{service}":
    parameters:
      - name: service
        in: path
        description: The VCS the organization is in
        required: true
        schema:
          type: string
    post:
      summary: Submit a repository for analysis
      tags:
        - repo
      operationId: repo_post
      requestBody:
        content:
          "application/json":
            schema:
              type: array
              minimum: 1
              items:
                $ref: "#/components/schemas/ScanRequestWithRepoOrg"
      responses:
        "200":
          description: Repository was queued for analysis
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ScanResponse"
        "400":
          description: Request validation failed
  "/{service}/{org}/{repo}":
    parameters:
      - name: service
        in: path
        description: The VCS the organization is in
        required: true
        schema:
          type: string
      - name: org
        in: path
        description: The organization the repository is in
        required: true
        schema:
          type: string
      - name: repo
        in: path
        description: The name of the repository
        required: true
        schema:
          type: string
    get:
      summary: Retrieve a report of a repository
      tags:
        - repo
      operationId: repo_get
      parameters:
        - name: results
          in: query
          description: The type of results to filter
          schema:
            type: string
            enum:
              - vulnerabilities
              - secrets
              - static_analysis
              - inventory
              - configuration
        - name: severity
          in: query
          description: The vulnerability severity to filter
          schema:
            type: string
            enum:
              - critical
              - high
              - medium
              - low
              - negligible
        - name: secret
          in: query
          description: The secret type to filter
          schema:
            type: string
            enum:
              - aws
              - ssh
        - name: format
          in: query
          description: The report format to return
          schema:
            type: string
            enum:
              - full
              - summary
      responses:
        "200":
          description: Analysis report
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/AnalysisReport"
        "404":
          description: Repository not found
    post:
      summary: Submit the repository for analysis
      tags:
        - repo
      operationId: repo_url_post
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/ScanRequest"
      responses:
        "200":
          description: Repository was queued for analysis
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ScanResponse"
        "400":
          description: Request validation failed
  "/{service}/{org}/{repo}/{id}":
    parameters:
      - name: service
        in: path
        description: The VCS the organization is in
        required: true
        schema:
          type: string
      - name: org
        in: path
        description: The organization the repository is in
        required: true
        schema:
          type: string
      - name: repo
        in: path
        description: The name of the repository
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The scan ID
        required: true
        schema:
          type: string
    get:
      summary: Retrieve a report of a repository
      tags:
        - repo
      operationId: repo_get_by_id
      parameters:
        - name: results
          in: query
          description: The type of results to filter
          schema:
            type: string
            enum:
              - vulnerabilities
              - secrets
              - static_analysis
              - inventory
              - configuration
        - name: severity
          in: query
          description: The vulnerability severity to filter
          schema:
            type: string
            enum:
              - critical
              - high
              - medium
              - low
              - negligible
        - name: secret
          in: query
          description: The secret type to filter
          schema:
            type: string
            enum:
              - aws
              - ssh
        - name: format
          in: query
          description: The report format to return
          schema:
            type: string
            enum:
              - full
              - summary
        - name: filter_diff
          in: query
          description: Whether to filter out items not included in diff. Has no effect if diff_base was not included in scan.
          required: false
          schema:
            type: boolean
            default: true
          allowEmptyValue: true
      responses:
        "200":
          description: Analysis report
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/AnalysisReport"
        "404":
          description: Repository not found
  "/{service}/{org}/{repo}/history":
    parameters:
      - name: service
        in: path
        description: The VCS the organization is in
        required: true
        schema:
          type: string
      - name: org
        in: path
        description: The organization the repository is in
        required: true
        schema:
          type: string
      - name: repo
        in: path
        description: The name of the repository
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Limit the number of records returned to this number.
        required: false
        schema:
          type: integer
      - name: offset
        in: query
        description: The offset number to get the history from.
        required: false
        schema:
          type: integer
      - name: inititated_by
        in: query
        description: Filter history to scans initiated by just this user.
        required: false
        schema:
          type: string
      - name: include_batch
        in: query
        description: Whether to include batch priority scans in the history
        required: false
        schema:
          type: boolean
          default: false
        allowEmptyValue: true
      - name: include_diff
        in: query
        description: Whether to include diff scans in the history
        required: false
        schema:
          type: boolean
          default: false
        allowEmptyValue: true
    get:
      summary: Retrieve the scan history for a repository
      tags:
        - repo
      operationId: repo_get_history
      responses:
        "200":
          description: Scan history
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/PagedScanHistory"
        "404":
          description: Repository not found
  "/{service}/{org}/{repo}/whitelist":
    parameters:
      - name: service
        in: path
        description: The VCS the organization is in
        required: true
        schema:
          type: string
      - name: org
        in: path
        description: The organization the repository is in
        required: true
        schema:
          type: string
      - name: repo
        in: path
        description: The name of the repository
        required: true
        schema:
          type: string
    get:
      summary: Retrieve the whitelist for a repository
      tags:
        - whitelist
      operationId: whitelist_get_all
      parameters:
        - name: type
          in: query
          description: The type of whitelist item to filter openapi
          schema:
            type: string
            enum:
              - vulnerability
              - secret
              - secret_raw
              - static_analysis
              - configuration
      responses:
        "200":
          description: Whitelist
          content:
            "application/json":
              schema:
                type: array
                minimum: 1
                items:
                  $ref: "#/components/schemas/WhitelistItem"
        "404":
          description: Repository not found
    post:
      summary: Create a new whitelist item
      tags:
        - whitelist
      operationId: whitelist_post
      parameters:
        - name: org
          in: path
          description: The organization the repository is in
          required: true
          schema:
            type: string
            format: uuid
        - name: repo
          in: path
          description: The name of the repository
          required: true
          schema:
            type: string
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/WhitelistItem"
      responses:
        "204":
          description: Update successful
        "404":
          description: Item not found
  "/{service}/{org}/{repo}/whitelist/{id}":
    parameters:
      - name: service
        in: path
        description: The VCS the organization is in
        required: true
        schema:
          type: string
      - name: org
        in: path
        description: The organization the repository is in
        required: true
        schema:
          type: string
          format: uuid
      - name: repo
        in: path
        description: The name of the repository
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the whitelist item
        required: true
        schema:
          type: string
    get:
      summary: Retrieve a specific whitelist item for a repository
      tags:
        - whitelist
      operationId: whitelist_get
      responses:
        "200":
          description: Whitelist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/WhitelistItemWithId"
        "404":
          description: Item not found
    put:
      summary: Update a specific whitelist item
      tags:
        - whitelist
      operationId: whitelist_put
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/WhitelistItem"
      responses:
        "204":
          description: Update successful
        "404":
          description: Item not found
    delete:
      summary: Delete a specific whitelist item
      tags:
        - whitelist
      operationId: whitelist_delete
      responses:
        "204":
          description: Delete successful
        "404":
          description: Item not found
  "/{service}/{org}/{repo}/{id}/report":
    parameters:
      - name: service
        in: path
        description: The VCS the organization is in
        required: true
        schema:
          type: string
      - name: org
        in: path
        description: The organization the repository is in
        required: true
        schema:
          type: string
      - name: repo
        in: path
        description: The name of the repository
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The scan ID
        required: true
        schema:
          type: string
    get:
      summary: Retrieve the most recent report generated for the scan
      tags:
        - report
      operationId: report_get_latest
      responses:
        "200":
          description: Report metadata
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ReportResponse"
        "404":
          description: Repository, scan, or report not found
    post:
      summary: Request a new report be generated
      tags:
        - report
      operationId: report_post
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/ReportRequest"
      responses:
        "200":
          description: Report request was queued for generation
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ScanResponse"
        "207":
          description: Some report requests were queued for generation and some failed to be queued
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ScanResponse"
        "404":
          description: Scan not found
  "/{service}/{org}/{repo}/{id}/report/{report_id}":
    parameters:
      - name: service
        in: path
        description: The VCS the organization is in
        required: true
        schema:
          type: string
      - name: org
        in: path
        description: The organization the repository is in
        required: true
        schema:
          type: string
          format: uuid
      - name: repo
        in: path
        description: The name of the repository
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the scan
        required: true
        schema:
          type: string
      - name: report_id
        in: path
        description: The ID of the report
        required: true
        schema:
          type: string
    get:
      summary: Retrieve the report generated for the scan with the provided ID
      tags:
        - report
      operationId: report_get_by_id
      responses:
        "200":
          description: Report metadata
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ReportResponse"
        "404":
          description: Repository, scan, or report not found
  /users:
    parameters:
      - name: limit
        in: query
        description: Limit the number of records returned to this number.
        required: false
        schema:
          type: integer
      - name: offset
        in: query
        description: The offset number to get the history from.
        required: false
        schema:
          type: integer
      - name: admin
        in: query
        description: Filter on the admin flag
        required: false
        schema:
          type: boolean
      - name: email
        in: query
        description: Filter on the email (exact match)
        required: false
        schema:
          type: string
      - name: email__contains
        in: query
        description: Filter on the email (case-sensitive substring match)
        required: false
        schema:
          type: string
      - name: email__icontains
        in: query
        description: Filter on the email (case-insensitive substring match)
        required: false
        schema:
          type: string
      - name: scope
        in: query
        description: Filter on the scope (exact match)
        required: false
        schema:
          type: string
      - name: scope__contains
        in: query
        description: Filter on the scope (case-sensitive substring match)
        required: false
        schema:
          type: string
      - name: scope__icontains
        in: query
        description: Filter on the scope (case-insensitive substring match)
        required: false
        schema:
          type: string
      - name: features
        in: query
        description: Filter on the features (exact match) use -feature to exclude feature
        required: false
        schema:
          type: string
      - name: last_login
        in: query
        description: Filter on the last_login (exact match)
        required: false
        schema:
          type: string
          format: date-time
      - name: last_login__lt
        in: query
        description: Filter on the last_login (match before time)
        required: false
        schema:
          type: string
          format: date-time
      - name: last_login__gt
        in: query
        description: Filter on the last_login (match after time)
        required: false
        schema:
          type: string
          format: date-time
      - name: order_by
        in: query
        description: Order the list by the fields listed
        required: false
        schema:
          type: string
          enum:
            - admin
            - -admin
            - email
            - -email
            - scope
            - -scope
            - last_login
            - -last_login
    get:
      summary: Return a list of users
      tags:
        - users
      operationId: users
      responses:
        "200":
          description: List of users
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/PagedUserItem"
  "/users/{id}":
    parameters:
      - name: id
        in: path
        description: user ID (email address or "self")
        required: true
        schema:
          type: string
    get:
      summary: Return information about the user
      tags:
        - users
      operationId: users_id
      responses:
        "200":
          description: Information specific to the logged in user.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UserItem"
    post:
      summary: Create a user
      tags:
        - users
      operationId: users_id_post
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "200":
          description: API key created
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UserItem"
        "400":
          description: Request validation failed
        "409":
          description: User exists
    put:
      summary: Update a user
      tags:
        - users
      operationId: users_id_put
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "200":
          description: API key created
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UserItem"
        "400":
          description: Request validation failed
    delete:
      summary: Delete a user
      tags:
        - users
      operationId: users_id_delete
      responses:
        "204":
          description: Delete successful
        "404":
          description: User not found
  "/users/{id}/keys":
    parameters:
      - name: id
        in: path
        description: user ID (email address or "self")
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Limit the number of records returned to this number.
        required: false
        schema:
          type: integer
      - name: offset
        in: query
        description: The offset number to get the history from.
        required: false
        schema:
          type: integer
    get:
      summary: Return API key information
      tags:
        - users
      operationId: users_id_keys
      responses:
        "200":
          description: API keys
          content:
            "application/json":
              schema:
                type: array
                minimum: 1
                items:
                  $ref: "#/components/schemas/PagedAPIKeyItem"
    post:
      summary: Create an API key
      tags:
        - users
      operationId: users_id_keys_post
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/APIKeyRequest"
      responses:
        "200":
          description: API key created
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/APIKeyResponse"
        "400":
          description: Request validation failed
  "/users/{id}/keys/{kid}":
    parameters:
      - name: id
        in: path
        description: user ID (email address or "self")
        required: true
        schema:
          type: string
      - name: kid
        in: path
        description: API key ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Return API key information
      tags:
        - users
      operationId: users_id_keys_item
      responses:
        "200":
          description: API key
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/APIKeyItem"
    delete:
      summary: Delete an API key
      tags:
        - users
      operationId: users_self_keys_delete
      responses:
        "204":
          description: Delete successful
        "404":
          description: Item not found
  "/users/{id}/services":
    parameters:
      - name: id
        in: path
        description: user ID (email address or "self")
        required: true
        schema:
          type: string
    get:
      summary: Return list of linked user services
      tags:
        - users
      operationId: users_id_services_get
      responses:
        "200":
          description: Get successful
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UsersServicesResponse"
    post:
      summary: Link a new user service
      tags:
        - users
      operationId: users_id_services_post
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/UsersServicesRequest"
      responses:
        "200":
          description: Post successful
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UsersServicesResponse"
        "400":
          description: |
            Name is required, \
            params is required, \
            Service ID invalid, \
            Either auth_code or username param is required, \
            Invalid auth_code param
        "409":
          description: User exists

  "/users/{id}/services/{sid}":
    parameters:
      - name: id
        in: path
        description: user ID (email address or "self")
        required: true
        schema:
          type: string
      - name: sid
        in: path
        description: service ID
        required: true
        schema:
          type: string
    get:
      summary: Return info for linked service
      tags:
        - users
      operationId: users_id_services_sid_get
      responses:
        "200":
          description: Get successful
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UsersServicesServiceResponse"
        "404":
          description: Service not found for user
    delete:
      summary: Unlink user service
      tags:
        - users
      operationId: users_id_services_sid_delete
      responses:
        "204":
          description: Delete successful

  # SBOM paths
  /sbom/components:
    parameters:
      - name: limit
        in: query
        description: Limit the number of records returned to this number.
        required: false
        schema:
          type: integer
      - name: offset
        in: query
        description: The offset number to get the paging from.
        required: false
        schema:
          type: integer
      - name: name
        in: query
        description: Filter on the component name (exact match)
        required: false
        schema:
          type: string
      - name: name__contains
        in: query
        description: Filter on the component name (case-sensitive substring match)
        required: false
        schema:
          type: string
      - name: name__icontains
        in: query
        description: Filter on the component name (case-insensitive substring match)
        required: false
        schema:
          type: string
      - name: version
        in: query
        description: Filter on the component version (exact match)
        required: false
        schema:
          type: string
      - name: version__contains
        in: query
        description: Filter on the component version (case-sensitive substring match)
        required: false
        schema:
          type: string
      - name: version__icontains
        in: query
        description: Filter on the component version (case-insensitive substring match)
        required: false
        schema:
          type: string
      - name: license
        in: query
        description: Filter on the component license (exact match)
        required: false
        schema:
          type: string
      - name: license__contains
        in: query
        description: Filter on the component license (case-sensitive substring match)
        required: false
        schema:
          type: string
      - name: license__icontains
        in: query
        description: Filter on the component license (case-insensitive substring match)
        required: false
        schema:
          type: string
      - name: service
        in: query
        description: Filter on the component repository service name (exact match)
        required: false
        schema:
          type: string
      - name: service__contains
        in: query
        description: Filter on the component repository service name (case-sensitive substring match)
        required: false
        schema:
          type: string
      - name: service__icontains
        in: query
        description: Filter on the component repository service name (case-insensitive substring match)
        required: false
        schema:
          type: string
      - name: repo
        in: query
        description: Filter on the component repository name (exact match)
        required: false
        schema:
          type: string
      - name: repo__contains
        in: query
        description: Filter on the component repository name (case-sensitive substring match)
        required: false
        schema:
          type: string
      - name: repo__icontains
        in: query
        description: Filter on the component repository name (case-insensitive substring match)
        required: false
        schema:
          type: string
      - name: last_scan
        in: query
        description: Filter on the component last scan time (exact match)
        required: false
        schema:
          type: string
          format: date-time
      - name: last_scan__gt
        in: query
        description: Filter on the component last scan time (since timestamp)
        required: false
        schema:
          type: string
          format: date-time
      - name: last_scan__lt
        in: query
        description: Filter on the component last scan time (prior to timestamp)
        required: false
        schema:
          type: string
          format: date-time
      - name: order_by
        in: query
        description: Order the list by the fields listed
        required: false
        schema:
          type: string
          enum:
            - name
            - -name
            - version
            - -version
    get:
      summary: Return a list of components
      tags:
        - sbom
      operationId: sbom_components
      responses:
        "200":
          description: List of components
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/PagedSBOMComponents"
  "/sbom/components/{name}":
    parameters:
      - name: name
        in: path
        description: Component name (URL-component-encoded)
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Limit the number of records returned to this number.
        required: false
        schema:
          type: integer
      - name: offset
        in: query
        description: The offset number to get the paging from.
        required: false
        schema:
          type: integer
      - name: version
        in: query
        description: Filter on the component version (exact match)
        required: false
        schema:
          type: string
      - name: version__contains
        in: query
        description: Filter on the component version (case-sensitive substring match)
        required: false
        schema:
          type: string
      - name: version__icontains
        in: query
        description: Filter on the component version (case-insensitive substring match)
        required: false
        schema:
          type: string
      - name: license
        in: query
        description: Filter on the component license (exact match)
        required: false
        schema:
          type: string
      - name: license__contains
        in: query
        description: Filter on the component license (case-sensitive substring match)
        required: false
        schema:
          type: string
      - name: license__icontains
        in: query
        description: Filter on the component license (case-insensitive substring match)
        required: false
        schema:
          type: string
      - name: service
        in: query
        description: Filter on the component repository service name (exact match)
        required: false
        schema:
          type: string
      - name: service__contains
        in: query
        description: Filter on the component repository service name (case-sensitive substring match)
        required: false
        schema:
          type: string
      - name: service__icontains
        in: query
        description: Filter on the component repository service name (case-insensitive substring match)
        required: false
        schema:
          type: string
      - name: repo
        in: query
        description: Filter on the component repository name (exact match)
        required: false
        schema:
          type: string
      - name: repo__contains
        in: query
        description: Filter on the component repository name (case-sensitive substring match)
        required: false
        schema:
          type: string
      - name: repo__icontains
        in: query
        description: Filter on the component repository name (case-insensitive substring match)
        required: false
        schema:
          type: string
      - name: last_scan
        in: query
        description: Filter on the component last scan time (exact match)
        required: false
        schema:
          type: string
          format: date-time
      - name: last_scan__gt
        in: query
        description: Filter on the component last scan time (since timestamp)
        required: false
        schema:
          type: string
          format: date-time
      - name: last_scan__lt
        in: query
        description: Filter on the component last scan time (prior to timestamp)
        required: false
        schema:
          type: string
          format: date-time
      - name: order_by
        in: query
        description: Order the list by the fields listed
        required: false
        schema:
          type: string
          enum:
            - name
            - -name
            - version
            - -version
    get:
      summary: Return a list of component versions
      tags:
        - sbom
      operationId: sbom_components_name
      responses:
        "200":
          description: List of component versions for the component name
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/PagedSBOMComponents"
        "404":
          description: Component not found
  "/sbom/components/{name}/{version}":
    parameters:
      - name: name
        in: path
        description: Component name (URL-component-encoded)
        required: true
        schema:
          type: string
      - name: version
        in: path
        description: Component version (URL-component-encoded)
        required: true
        schema:
          type: string
    get:
      summary: Return information about the specific version of the component
      tags:
        - sbom
      operationId: sbom_components_name_version
      responses:
        "200":
          description: Information about the component version
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/SBOMComponent"
        "404":
          description: Component version not found
  "/sbom/components/{name}/{version}/repos":
    parameters:
      - name: name
        in: path
        description: Component name (URL-component-encoded)
        required: true
        schema:
          type: string
      - name: version
        in: path
        description: Component version (URL-component-encoded)
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Limit the number of records returned to this number.
        required: false
        schema:
          type: integer
      - name: offset
        in: query
        description: The offset number to get the paging from.
        required: false
        schema:
          type: integer
      - name: license
        in: query
        description: Filter on the component license (exact match)
        required: false
        schema:
          type: string
      - name: service
        in: query
        description: Filter on the component repository service name (exact match)
        required: false
        schema:
          type: string
      - name: service__contains
        in: query
        description: Filter on the component repository service name (case-sensitive substring match)
        required: false
        schema:
          type: string
      - name: service__icontains
        in: query
        description: Filter on the component repository service name (case-insensitive substring match)
        required: false
        schema:
          type: string
      - name: repo
        in: query
        description: Filter on the component repository name (exact match)
        required: false
        schema:
          type: string
      - name: repo__contains
        in: query
        description: Filter on the component repository name (case-sensitive substring match)
        required: false
        schema:
          type: string
      - name: repo__icontains
        in: query
        description: Filter on the component repository name (case-insensitive substring match)
        required: false
        schema:
          type: string
      - name: last_scan
        in: query
        description: Filter on the component last scan time (exact match)
        required: false
        schema:
          type: string
          format: date-time
      - name: last_scan__gt
        in: query
        description: Filter on the component last scan time (since timestamp)
        required: false
        schema:
          type: string
          format: date-time
      - name: last_scan__lt
        in: query
        description: Filter on the component last scan time (prior to timestamp)
        required: false
        schema:
          type: string
          format: date-time
      - name: order_by
        in: query
        description: Order the list by the fields listed
        required: false
        schema:
          type: string
          enum:
            - service
            - -service
            - repo
            - -repo
    get:
      summary: Return a list of repositories containing the component
      tags:
        - sbom
      operationId: sbom_components_name_version_repos
      responses:
        "200":
          description: List of repositories containing the component
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/PagedSBOMRepositories"
        "404":
          description: Component version not found
  /sbom/licenses:
    parameters:
      - name: limit
        in: query
        description: Limit the number of records returned to this number.
        required: false
        schema:
          type: integer
      - name: offset
        in: query
        description: The offset number to get the paging from.
        required: false
        schema:
          type: integer
      - name: name
        in: query
        description: Filter on the component name (exact match)
        required: false
        schema:
          type: string
      - name: name__contains
        in: query
        description: Filter on the component name (case-sensitive substring match)
        required: false
        schema:
          type: string
      - name: name__icontains
        in: query
        description: Filter on the component name (case-insensitive substring match)
        required: false
        schema:
          type: string
      - name: order_by
        in: query
        description: Order the list by the fields listed
        required: false
        schema:
          type: string
          enum:
            - name
            - -name
    get:
      summary: Return a list of licenses
      tags:
        - sbom
      operationId: sbom_licenses
      responses:
        "200":
          description: List of licenses
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/PagedSBOMLicenses"
  "/sbom/licenses/{id}":
    parameters:
      - name: id
        in: path
        description: License ID
        required: true
        schema:
          type: string
    get:
      summary: Return information about the specific license
      tags:
        - sbom
      operationId: sbom_licenses_id
      responses:
        "200":
          description: Information about the license
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/SBOMLicense"
        "404":
          description: License not found

  # Search paths
  /search/repositories:
    parameters:
      - name: limit
        in: query
        description: Limit the number of records returned to this number.
        required: false
        schema:
          type: integer
      - name: offset
        in: query
        description: The offset number to get the paging from.
        required: false
        schema:
          type: integer
      - name: service
        in: query
        description: Filter on the repository service name (exact match)
        required: false
        schema:
          type: string
      - name: service__contains
        in: query
        description: Filter on the repository service name (case-sensitive substring match)
        required: false
        schema:
          type: string
      - name: service__icontains
        in: query
        description: Filter on the repository service name (case-insensitive substring match)
        required: false
        schema:
          type: string
      - name: repo
        in: query
        description: Filter on the repository name (exact match)
        required: false
        schema:
          type: string
      - name: repo__contains
        in: query
        description: Filter on the repository name (case-sensitive substring match)
        required: false
        schema:
          type: string
      - name: repo__icontains
        in: query
        description: Filter on the repository name (case-insensitive substring match)
        required: false
        schema:
          type: string
      - name: last_qualified_scan
        in: query
        description: Filter on the last qualified scan time (exact match)
        required: false
        schema:
          type: string
          format: date-time
      - name: last_qualified_scan__gt
        in: query
        description: Filter on the last qualified scan time (since timestamp)
        required: false
        schema:
          type: string
          format: date-time
      - name: last_qualified_scan__lt
        in: query
        description: Filter on the last qualified scan time (prior to timestamp)
        required: false
        schema:
          type: string
          format: date-time
      - name: last_qualified_scan__isnull
        in: query
        description: Filter on the presence of any qualified scan
        required: false
        schema:
          type: boolean
      - name: risk
        in: query
        description: Filter on the risk level of the repository
        required: false
        schema:
          type: string
          enum:
            - priority
            - critical
            - high
            - moderate
            - low
      - name: app_id
        in: query
        description: Filter on the repository application ID (exact match)
        required: false
        schema:
          type: string
      - name: app_id__isnull
        in: query
        description: Filter on the presense of any repository application ID (exact match)
        required: false
        schema:
          type: boolean
      - name: repo_contact
        in: query
        description: Filter on the repository contact (exact match)
        required: false
        schema:
          type: string
      - name: repo_contact__contains
        in: query
        description: Filter on the repository contact (case-sensitive substring match)
        required: false
        schema:
          type: string
      - name: repo_contact__icontains
        in: query
        description: Filter on the repository contact (case-insensitive substring match)
        required: false
        schema:
          type: string
      - name: repo_contact__isnull
        in: query
        description: Filter on the presense of a repository contact
        required: false
        schema:
          type: boolean
      - name: order_by
        in: query
        description: Order the list by the fields listed
        required: false
        schema:
          type: string
          enum:
            - service
            - -service
            - repo
            - -repo
            - risk
            - -risk
    get:
      summary: Return a list of repositories
      tags:
        - search
      operationId: search_repositories
      responses:
        "200":
          description: List of repositories
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/PagedSearchRepositories"

  # System paths
  /system/status:
    get:
      summary: Return the system status
      tags:
        - system
      operationId: system_status
      responses:
        "200":
          description: System status when not in maintenance
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/SystemStatus"
        "503":
          description: System status when in maintenance
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/SystemStatus"
  /system/allowlist:
    get:
      summary: Retrieve the system-wide allowlist
      tags:
        - system_allowlist
      operationId: system_allowlist_get_all
      responses:
        "200":
          description: System allowlist
          content:
            "application/json":
              schema:
                type: array
                minimum: 1
                items:
                  $ref: "#/components/schemas/PagedSystemAllowlistItem"
    post:
      summary: Create a new allowlist item
      tags:
        - system_allowlist
      operationId: system_allowlist_post
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/SystemAllowlistItem"
      responses:
        "200":
          description: Creation successful
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/SystemAllowlistItemWithId"
  "/system/allowlist/{id}":
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: Retrieve a specific system-wide allowlist item
      tags:
        - system_allowlist
      operationId: system_allowlist_get
      responses:
        "200":
          description: Allowlist item
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/SystemAllowlistItemWithId"
        "404":
          description: Item not found
    put:
      summary: Update a specific system-wide allowlist item
      tags:
        - system_allowlist
      operationId: system_allowlist_put
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/SystemAllowlistItem"
      responses:
        "204":
          description: Update successful
        "404":
          description: Item not found
    delete:
      summary: Delete a specific system-wide allowlist item
      tags:
        - system_allowlist
      operationId: system_allowlist_delete
      responses:
        "204":
          description: Delete successful
        "404":
          description: Item not found

  # Group paths
  /groups:
    parameters:
      - $ref: "#/components/parameters/limit"
      - $ref: "#/components/parameters/offset"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/name__contains"
      - $ref: "#/components/parameters/name__icontains"
      - $ref: "#/components/parameters/parent"
      - $ref: "#/components/parameters/parent__contains"
      - $ref: "#/components/parameters/parent__icontains"
      - $ref: "#/components/parameters/description"
      - $ref: "#/components/parameters/description__contains"
      - $ref: "#/components/parameters/description__icontains"
      - name: order_by
        in: query
        description: Order the list by the fields listed
        required: false
        schema:
          type: string
          enum:
            - name
            - -name
            - parent
            - -parent
            - created
            - -created
            - allowlist
            - -allowlist
    get:
      summary: Return a list of groups
      tags:
        - groups
      operationId: groups
      responses:
        "200":
          description: List of groups
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/PagedGroupItem"
    post:
      summary: Create a group
      tags:
        - groups
      operationId: groups_post
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/GroupRequest"
      responses:
        "200":
          description: Group created
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/GroupItem"
        "400":
          description: Request validation failed
        "409":
          description: Group exists
  "/groups/{id}":
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: Return information about the group
      tags:
        - groups
      operationId: groups_id
      responses:
        "200":
          description: Information specific to the group.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/GroupItem"
        "404":
          description: Group not found
    put:
      summary: Update a group
      tags:
        - groups
      operationId: groups_id_put
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/GroupRequest"
      responses:
        "200":
          description: Group updated
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/GroupItem"
        "400":
          description: Request validation failed
    delete:
      summary: Delete a group
      tags:
        - groups
      operationId: group_id_delete
      responses:
        "204":
          description: Delete successful
        "404":
          description: Group not found
  "/groups/{id}/keys":
    parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/limit"
      - $ref: "#/components/parameters/offset"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/name__contains"
      - $ref: "#/components/parameters/name__icontains"
      - $ref: "#/components/parameters/created"
      - $ref: "#/components/parameters/created__lt"
      - $ref: "#/components/parameters/created__gt"
      - $ref: "#/components/parameters/expires"
      - $ref: "#/components/parameters/expires__lt"
      - $ref: "#/components/parameters/expires__gt"
      - name: order_by
        in: query
        description: Order the list by the fields listed
        required: false
        schema:
          type: string
          enum:
            - name
            - -name
            - created
            - -created
            - expires
            - -expires
    get:
      summary: Return API key information
      tags:
        - groups
      operationId: groups_id_keys
      responses:
        "200":
          description: API keys
          content:
            "application/json":
              schema:
                type: array
                minimum: 1
                items:
                  $ref: "#/components/schemas/PagedAPIKeyItem"
        "404":
          description: Group not found
    post:
      summary: Create an API key
      tags:
        - groups
      operationId: groups_id_keys_post
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/APIKeyRequest"
      responses:
        "200":
          description: API key created
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/APIKeyResponse"
        "400":
          description: Request validation failed
        "404":
          description: Group not found
  "/groups/{id}/keys/{kid}":
    parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/kid"
    get:
      summary: Return API key information
      tags:
        - groups
      operationId: groups_id_keys_item
      responses:
        "200":
          description: API key
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/APIKeyItem"
        "404":
          description: Group or key not found
    delete:
      summary: Delete an API key
      tags:
        - groups
      operationId: groups_id_keys_delete
      responses:
        "204":
          description: Delete successful
        "404":
          description: Group or key not found
  "/groups/{id}/members":
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: Return list of group members
      tags:
        - groups
      operationId: groups_id_members_get
      responses:
        "200":
          description: Get successful
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/PagedGroupMemberItem"
        "404":
          description: Group not found
  "/groups/{id}/members/{uid}":
    parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/uid"
    get:
      summary: Return group members
      tags:
        - groups
      operationId: groups_id_members_uid_get
      responses:
        "200":
          description: Get successful
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/GroupMemberItem"
        "404":
          description: Group or member not found
    post:
      summary: Add a user to a group
      tags:
        - groups
      operationId: groups_id_members_uid_post
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/GroupMemberRequest"
      responses:
        "200":
          description: Post successful
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/GroupMemberItem"
        "400":
          description: Invalid request
        "404":
          description: Group or user not found
        "409":
          description: User is already a member
    put:
      summary: Update a user in a group
      tags:
        - groups
      operationId: groups_id_members_uid_put
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/GroupMemberRequest"
      responses:
        "200":
          description: Update successful
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/GroupMemberItem"
        "400":
          description: Invalid request
        "404":
          description: Group or user not found
    delete:
      summary: Remove a user from a group
      tags:
        - groups
      operationId: groups_id_members_uid_delete
      responses:
        "204":
          description: Removal successful
        "404":
          description: Group or user not found

security:
  - x-api-key: []

components:
  # Reusable object schemas
  schemas:
    ScanRequest:
      type: object
      properties:
        branch:
          description: Repository branch
          type: string
        plugins:
          description: List of plugins to run during analysis
          type: array
          items:
            type: string
            enum:
              - checkov
              - swiftlint
              - detekt
              - aqua_cli_scanner
              - findsecbugs_java7
              - findsecbugs_java8
              - findsecbugs_java13
              - gitsecrets
              - github_repo_health
              - node_dependencies
              - owasp_dependency_check
              - php_sensio_security_checker
              - python_code_checker
              - technology_discovery
              - truffle_hog
              - brakeman
              - bundler_audit
              - bandit
              - eslint
              - nodejsscan
        categories:
          description: List of plugin categories to run during analysis
          type: array
          items:
            type: string
            enum:
              - vulnerability
              - secret
              - static_analysis
              - inventory
              - configuration
        depth:
          description: Max number of commits to analyze
          type: integer
          format: int32
          default: 500
        include_dev:
          description: Whether to include dev dependencies in analysis
          type: boolean
          default: false
        callback:
          description: Scan complete callback
          type: object
          properties:
            url:
              description: Callback URL to POST to
              type: string
            client_id:
              description: Client-specified ID to echo back in POST
              type: string
        batch_priority:
          description: Whether to give the scan batch (lower) batch_priority
          type: boolean
          default: false
        diff_base:
          description: Commit hash or branch name to use for diff-based reporting
          type: string
          nullable: true
          minLength: 1
          maxLength: 256
        batch_id:
          description: Scan Batch ID
          type: string
        include_paths:
          description: List of paths within the repo to include in the scan. Stacks with exclude_paths. Optional, by default the entire repo is scanned. If include_paths is used and exclude_paths is missing or empty exclude_paths defaults to ["*"].
          type: array
          items:
            type: string
        exclude_paths:
          description: List of paths within the repo to exclude from the scan. If include_paths is used and exclude_paths is missing or empty exclude_paths defaults to ["*"].
          type: array
          items:
            type: string
    ScanRequestWithRepoOrg:
      allOf:
        - $ref: "#/components/schemas/ScanRequest"
        - type: object
          required:
            - repo
          properties:
            repo:
              description: Name of the repository
              type: string
            org:
              description: Organization the repository belongs to
              type: string
    ScanResponse:
      type: object
      properties:
        queued:
          description: Repositories successfully queued with scan IDs
          type: array
          items:
            type: string
        failed:
          description: Repositories that failed
          type: array
          items:
            properties:
              repo:
                description: Repository name
                type: string
              error:
                description: Error message
                type: string
    ScanHistoryItem:
      type: object
      required:
        - repo
        - branch
        - timestamp
        - initiated_by
      properties:
        repo:
          description: Repo name with scan ID
          type: string
        branch:
          description: Scan branch name
          type: string
        timestamps:
          description: Start and end times of scan
          type: object
          properties:
            queued:
              description: Time the scan was queued
              type: string
              format: date-time
            start:
              description: Time scan started
              type: string
              format: date-time
            end:
              description: Time scan finished
              type: string
              format: date-time
        initiated_by:
          description: User ID of the user that initiated the scan
          type: string
        status:
          description: Status of the most recent analysis job
          type: string
          enum:
            - queued
            - processing
            - completed
            - failed
        status_detail:
          description: Detailed scan status
          type: object
          properties:
            plugin_name:
              description: Currently running plugin
              type: string
            plugin_start_time:
              description: Start time of current plugin
              type: string
              format: date-time
            current_plugin:
              description: Count of plugins run
              type: integer
              format: int32
            total_plugins:
              description: Total number of plugins
              type: integer
              format: int32
        scan_options:
          description: Options used at scan creation
          $ref: "#/components/schemas/ScanRequest"
    PagedScanHistory:
      type: object
      required:
        - history
      properties:
        history:
          description: One page of scan history results.
          type: array
          items:
            $ref: "#/components/schemas/ScanHistoryItem"
        last_scan_id:
          description: identifies the last scan in the page of results, used to get the next page of results in a subsequent request
          type: string
    AnalysisReport:
      type: object
      properties:
        repo:
          description: Repository name
          type: string
        scan_id:
          description: Scan ID
          type: string
        branch:
          description: Branch name
          type: string
        engine_id:
          description: ID of the engine that ran the scan, for troubleshooting purposes
          type: string
        initiated_by:
          description: User ID of the user that initiated the scan
          type: string
        scan_options:
          description: Options used at scan creation
          $ref: "#/components/schemas/ScanRequest"
        status:
          description: Status of the most recent analysis job
          type: string
          enum:
            - queued
            - processing
            - completed
            - failed
        status_detail:
          description: Detailed scan status
          type: object
          properties:
            plugin_name:
              description: Currently running plugin
              type: string
            plugin_start_time:
              description: Start time of current plugin
              type: string
              format: date-time
            current_plugin:
              description: Count of plugins run
              type: integer
              format: int32
            total_plugins:
              description: Total number of plugins
              type: integer
              format: int32
        success:
          description: Whether the scan found no issues taking current filters into account
          type: boolean
        truncated:
          description: Whether the raw results exceeded storage limits and were truncated
          type: boolean
        timestamps:
          description: Start and end times of scan
          type: object
          properties:
            queued:
              description: Time the scan was queued
              type: string
              format: date-time
            start:
              description: Time scan started
              type: string
              format: date-time
            end:
              description: Time scan finished
              type: string
              format: date-time
        errors:
          description: Error messages
          type: object
          additionalProperties:
            type: array
            items:
              description: Error messages
              type: string
        alerts:
          description: Messages alerting the user to addressable things that are not scan failures
          type: object
          additionalProperties:
            type: array
            items:
              description: Alert messages
              type: string
        debug:
          description: Debug messages
          type: object
          additionalProperties:
            type: array
            items:
              description: Debug messages
              type: string
        results_summary:
          description: Summary scan results
          type: object
          properties:
            vulnerabilities:
              type: object
              description: The summary of vulnerablities
              properties:
                critical:
                  description: The number of critical severity vulnerabilities
                  type: integer
                  format: int32
                high:
                  description: The number of high severity vulnerabilities
                  type: integer
                  format: int32
                medium:
                  description: The number of medium severity vulnerabilities
                  type: integer
                  format: int32
                low:
                  description: The number of low severity vulnerabilities
                  type: integer
                  format: int32
                negligible:
                  description: The number of negligible vulnerabilities
                  type: integer
                  format: int32
            secrets:
              type: integer
              description: The number of secrets
              format: int32
            static_analysis:
              type: object
              description: The summary of static analysis findings
              properties:
                critical:
                  description: The number of critical severity findings
                  type: integer
                  format: int32
                high:
                  description: The number of high severity findings
                  type: integer
                  format: int32
                medium:
                  description: The number of medium severity findings
                  type: integer
                  format: int32
                low:
                  description: The number of low severity findings
                  type: integer
                  format: int32
                negligible:
                  description: The number of negligible findings
                  type: integer
                  format: int32
            inventory:
              type: object
              description: The summary of inventory findings
              properties:
                technology_discovery:
                  description: The number of technologies discovered
                  type: integer
                  format: int32
                base_images:
                  description: The number of base images
                  type: integer
                  format: int32
            configuration:
              type: object
              description: The summary of configuration findings
              properties:
                critical:
                  description: The number of critical severity findings
                  type: integer
                  format: int32
                high:
                  description: The number of high severity findings
                  type: integer
                  format: int32
                medium:
                  description: The number of medium severity findings
                  type: integer
                  format: int32
                low:
                  description: The number of low severity findings
                  type: integer
                  format: int32
                negligible:
                  description: The number of negligible findings
                  type: integer
                  format: int32
        results:
          description: Scan results
          type: object
          properties:
            vulnerabilities:
              type: object
              description: The vulnerable component
              additionalProperties:
                type: object
                description: The ID of the vulnerability
                properties:
                  source:
                    description: The dependency source of the component
                    type: array
                    items:
                      type: string
                  severity:
                    description: The severity of the vulnerability
                    type: string
                    enum:
                      - critical
                      - high
                      - medium
                      - low
                      - negligible
                  description:
                    description: Short description of the vulnerability
                    type: string
                  remediation:
                    description: Remediation steps for the vulnerability
                    type: string
            secrets:
              type: object
              description: The name of the file with the secret
              additionalProperties:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      description: Type of secret
                      type: string
                      enum:
                        - aws
                        - ssh
                        - mongo
                        - postgres
                        - redis
                        - urlauth
                        - google
                        - slack
                        - other
                    line:
                      description: Location within the file
                      type: integer
                    commit:
                      description: Hash of commit that added the secret
                      type: string
            static_analysis:
              type: object
              description: File that is noted to have vulnerabilities or insecure code
              additionalProperties:
                type: array
                items:
                  type: object
                  properties:
                    line:
                      description: Location within the file
                      type: integer
                    message:
                      description: message provided by analysis regarding issue
                      type: string
                    severity:
                      description: The severity of the insecurity or issue
                      type: string
                      enum:
                        - critical
                        - high
                        - medium
                        - low
                        - negligible
                    type:
                      description: Type of issue or insecurity
                      type: string
            inventory:
              type: object
              description: Name of plugin providing information about the project
              additionalProperties:
                type: object
                description: output of the plugin
            configuration:
              type: object
              description: Configuration check that does not meet the requirements
              additionalProperties:
                type: object
                description: The ID of the vulnerability
                properties:
                  id:
                    description: The identifier for the check
                    type: string
                  name:
                    description: Human-readable name for the check
                    type: string
                  description:
                    description: Short description of the check
                    type: string
                  severity:
                    description: The severity of the failing check
                    type: string
                    enum:
                      - critical
                      - high
                      - medium
                      - low
                      - negligible
    WhitelistItem:
      type: object
      required:
        - type
        - value
        - reason
        - created_by
        - created
        - updated
      properties:
        type:
          description: Whitelist item type
          type: string
          enum:
            - vulnerability
            - vulnerability_raw
            - secret
            - secret_raw
            - static_analysis
            - configuration
        value:
          description: The whitelisted value
          oneOf:
            - $ref: "#/components/schemas/WhitelistVulnItem"
            - $ref: "#/components/schemas/WhitelistVulnRawItem"
            - $ref: "#/components/schemas/WhitelistSecretItem"
            - $ref: "#/components/schemas/WhitelistSecretRawItem"
            - $ref: "#/components/schemas/WhitelistStaticAnalysisItem"
        expires:
          description: Expiration timestamp
          type: string
          format: date-time
        reason:
          description: Reason for creation
          type: string
        created_by:
          description: Autoset User that created the item, ignored if passed in post/put requests.
          type: string
        updated_by:
          description: Autoset User that last updated the item, ignored if passed in post/put requests
          type: string
        created:
          description: Autoset date-time the item was created, ignored if passed in post/put requests
          type: string
          format: date-time
        updated:
          description: Autoset date-time the item was last updated, ignored if passed in post/put requests
          type: string
          format: date-time
    WhitelistItemWithId:
      allOf:
        - $ref: "#/components/schemas/WhitelistItem"
        - type: object
          required:
            - id
            - reason
            - created_by
            - created
            - updated
          properties:
            id:
              description: ID of the whitelist item
              type: string
              format: uuid
            created_by:
              description: Autoset User that created the item, ignored if passed in post/put requests.
              type: string
            updated_by:
              description: Autoset User that last updated the item, ignored if passed in post/put requests
              type: string
            created:
              description: Autoset date-time the item was created, ignored if passed in post/put requests
              type: string
              format: date-time
            updated:
              description: Autoset date-time the item was last updated, ignored if passed in post/put requests
              type: string
              format: date-time
    WhitelistVulnItem:
      type: object
      properties:
        component:
          description: Vulnerable component
          type: string
        id:
          description: Vulnerability ID
          type: string
        source:
          description: Vulnerable component dependency source
          type: string
    WhitelistSecretItem:
      type: object
      properties:
        filename:
          description: Secret-containing filename
          type: string
        line:
          description: Secret location in file
          type: integer
        commit:
          description: Secret-containing commit
          type: string
    WhitelistStaticAnalysisItem:
      type: object
      properties:
        filename:
          description: Finding-containing filename
          type: string
        line:
          description: Finding location in file
          type: integer
        type:
          description: Finding type
          type: string
    WhitelistSecretRawItem:
      type: object
      properties:
        value:
          description: Secret value to whitelist repo-wide
          type: string
    WhitelistVulnRawItem:
      type: object
      properties:
        id:
          description: Secret value to whitelist repo-wide
          type: string
    UserItem:
      type: object
      properties:
        email:
          description: User email address
          type: string
        admin:
          description: User admin privileges
          type: boolean
        last_login:
          description: User's last login time
          type: string
          format: date-time
        scope:
          description: User scan scope
          type: array
          items:
            type: string
        features:
          description: User feature flags
          type: object
        scan_orgs:
          description: Scan orgs that are accessible to this user
          type: array
          items:
            type: string
    PagedUserItem:
      type: object
      required:
        - results
        - count
        - next
        - previous
      properties:
        results:
          description: One page of users.
          type: array
          items:
            $ref: "#/components/schemas/UserItem"
        count:
          description: Number of items returned
          type: integer
          format: int32
        next:
          description: Link to next page of results
          type: string
        previous:
          description: Link to the previous page of results
          type: string
    UserRequest:
      type: object
      properties:
        scope:
          description: User scope
          type: array
          items:
            type: string
        admin:
          description: User admin privileges
          type: boolean
        features:
          description: User feature flags
          type: object

    APIKeyItem:
      type: object
      required:
        - id
        - name
        - scope
        - expires
        - created
        - last_used
      properties:
        id:
          description: API key ID
          type: string
          format: uuid
        name:
          description: API key name
          type: string
        scope:
          description: API key scope
          type: array
          items:
            type: string
        expires:
          description: API key expiration time
          type: string
          format: date-time
        created:
          description: API key created time
          type: string
          format: date-time
        last_used:
          description: API key last_used time
          type: string
          format: date-time
    PagedAPIKeyItem:
      type: object
      required:
        - results
        - count
        - next
        - previous
      properties:
        results:
          description: One page of API keys
          type: array
          items:
            $ref: "#/components/schemas/APIKeyItem"
        count:
          description: Number of items returned
          type: integer
          format: int32
        next:
          description: Link to next page of results
          type: string
        previous:
          description: Link to the previous page of results
          type: string
    APIKeyRequest:
      type: object
      required:
        - name
        - scope
      properties:
        name:
          description: API key name
          type: string
        scope:
          description: API key scope
          type: array
          items:
            type: string
        expires:
          description: API key expiration time
          type: string
          format: date-time
    APIKeyResponse:
      type: object
      required:
        - key
      properties:
        key:
          description: API key
          type: string
    ReportRequest:
      type: object
      required:
        - type
      properties:
        type:
          description: Report format type
          type: string
          enum:
            - pdf
        filters:
          description: Filters applied to the scan results during report generation
          $ref: "#/components/schemas/ReportFilters"
    ReportResponse:
      type: object
      required:
        - report_id
        - report_type
        - status
        - created_by
        - timestamps
        - scan_id
        - filters
        - download
      properties:
        report_id:
          description: Report ID
          type: string
          format: uuid
        report_type:
          description: Report format type
          type: string
          enum:
            - pdf
        status:
          description: Report generation status
          type: string
          enum:
            - queued
            - processing
            - completed
            - failed
            - error
            - terminated
        created_by:
          description: User that initiated the report generation
          type: string
        timestamps:
          description: Report generation timestamps
          type: object
          properties:
            requested:
              description: Time the report generation was requested
              type: string
              format: date-time
            completed:
              description: Time report generation request completed
              type: string
              format: date-time
        scan_id:
          description: ID of the scan this report is for
          type: string
          format: uuid
        filters:
          description: Filters applied to the scan results during report generation
          $ref: "#/components/schemas/ReportFilters"
        download:
          description: Report download location
          type: object
          properties:
            url:
              description: Report download URL
              type: string
            expires:
              description: Report downloads URL expiration time
              type: string
              format: date-time
    ReportFilters:
      type: object
      properties:
        format:
          description: Report filtering format
          type: string
          enum:
            - full
            - summary
        filter_diff:
          description: Whether to filter out items not included in diff. Has no effect if diff_base was not included in scan.
          type: boolean
          default: true
        results:
          description: The type of results to filter
          type: array
          items:
            type: string
            enum:
              - vulnerabilities
              - secrets
              - static_analysis
              - inventory
              - configuration
        severity:
          description: The vulnerability severity to filter
          type: array
          items:
            type: string
            enum:
              - critical
              - high
              - medium
              - low
              - negligible
        secret:
          description: The secret type to filter
          type: array
          items:
            type: string
            enum:
              - aws
              - ssh
    UsersServicesRequest:
      type: object
      properties:
        services:
          description: List of linked services
          type: array
          items:
            type: string
            enum:
              - github
    UsersServicesResponse:
      type: object
      properties:
        name:
          description: Name of service
          type: string
          enum:
            - github
        params:
          description: Parameters
          type: object
          properties:
            auth_code:
              description: GitHub oauth auth code
              type: string
    UsersServicesServiceResponse:
      type: object
      properties:
        name:
          description: Name of service
          type: string
          enum:
            - github
        username:
          description: Service username
          type: string
        linked:
          description: Timestamp of when linked
          type: string

    # SBOM Schemas
    SBOMLicense:
      type: object
      required:
        - id
        - name
      properties:
        id:
          description: License ID (short name)
          type: string
        name:
          description: License name (long name)
          type: string
    SBOMComponent:
      type: object
      required:
        - name
        - version
        - licenses
      properties:
        name:
          description: Component name
          type: string
        version:
          description: Component version
          type: string
        licenses:
          description: Component licenses
          type: array
          items:
            $ref: "#/components/schemas/SBOMLicense"
    SBOMRepository:
      type: object
      required:
        - service
        - repo
        - sources
      properties:
        service:
          description: Service name
          type: string
        repo:
          description: Repository name
          type: string
        sources:
          description: Source file paths
          type: array
          items:
            type: string

    # Paged SBOM Schemas
    PagedSBOMLicenses:
      type: object
      required:
        - results
        - count
        - next
        - previous
      properties:
        results:
          description: One page of SBOM licenses
          type: array
          items:
            $ref: "#/components/schemas/SBOMLicense"
        count:
          description: Number of items returned
          type: integer
          format: int32
        next:
          description: Link to next page of results
          type: string
        previous:
          description: Link to the previous page of results
          type: string
    PagedSBOMComponents:
      type: object
      required:
        - results
        - count
        - next
        - previous
      properties:
        results:
          description: One page of SBOM components
          type: array
          items:
            $ref: "#/components/schemas/SBOMComponent"
        count:
          description: Number of items returned
          type: integer
          format: int32
        next:
          description: Link to next page of results
          type: string
        previous:
          description: Link to the previous page of results
          type: string
    PagedSBOMRepositories:
      type: object
      required:
        - results
        - count
        - next
        - previous
      properties:
        results:
          description: One page of SBOM licenses
          type: array
          items:
            $ref: "#/components/schemas/SBOMRepository"
        count:
          description: Number of items returned
          type: integer
          format: int32
        next:
          description: Link to next page of results
          type: string
        previous:
          description: Link to the previous page of results
          type: string

    # Search Schemas
    SearchRepository:
      type: object
      required:
        - service
        - repo
        - risk
        - qualified_scan
        - application_metadata
      properties:
        service:
          description: Service name
          type: string
        repo:
          description: Repo name (org/repo)
          type: string
        risk:
          description: Risk level
          type: string
          enum:
            - priority
            - critical
            - high
            - moderate
            - low
        qualified_scan:
          description: Identifying details of last qualified scan
          type: object
          properties:
            created:
              description: Timestamp of when the scan was created
              type: string
              format: date-time
            scan_id:
              description: ID of the scan
              type: string
              format: uuid
        application_metadata:
          description: Metadata for identifying the repo owner and associated application
          type: object

    # Paged Search Schemas
    PagedSearchRepositories:
      type: object
      required:
        - results
        - count
        - next
        - previous
      properties:
        results:
          description: One page of repositories
          type: array
          items:
            $ref: "#/components/schemas/SearchRepository"
        count:
          description: Number of items returned
          type: integer
          format: int32
        next:
          description: Link to next page of results
          type: string
        previous:
          description: Link to the previous page of results
          type: string

    # System Status
    SystemStatus:
      type: object
      required:
        - maintenance
        - engines
      properties:
        maintenance:
          description: Maintenance information
          type: object
          properties:
            enabled:
              description: Whether the system is in maintenance mode
              type: boolean
            message:
              description: Informational message accompanying maintenance mode
              type: string
        engines:
          description: Engine status summary
          type: object
          properties:
            status:
              description: Metadata conforming to the WarnerMedia baseline requirements
              type: string
              enum:
                - OK
                - DEGRADED
                - FAILED
                - OFFLINE
            count:
              description: Number of online engines
              type: integer
              format: int32

    # Groups
    GroupItem:
      type: object
      properties:
        id:
          description: Group UUID
          type: string
          format: uuid
        parent:
          description: Parent group UUID
          type: string
          format: uuid
        name:
          description: Group name
          type: string
        description:
          description: Group description
          type: string
        created:
          description: Group creation timestamp
          type: string
          format: date-time
        created_by:
          description: User that created the group
          type: string
        updated:
          description: Group update timestamp
          type: string
          format: date-time
        permissions:
          description: Group permissions
          type: object
          properties:
            scope:
              description: Authorization scope for this group
              type: array
              items:
                type: string
            features:
              description: Group feature flags
              type: object
            admin:
              description: Group admin privileges
              type: boolean
            allowlist:
              description: Whether the group members can do allowlist operations within the scope
              type: boolean
    PagedGroupItem:
      type: object
      required:
        - results
        - count
        - next
        - previous
      properties:
        results:
          description: One page of groups.
          type: array
          items:
            $ref: "#/components/schemas/GroupItem"
        count:
          description: Number of items returned
          type: integer
          format: int32
        next:
          description: Link to next page of results
          type: string
        previous:
          description: Link to the previous page of results
          type: string
    GroupRequest:
      type: object
      properties:
        parent:
          description: Parent group UUID
          type: string
          format: uuid
        name:
          description: Group name
          type: string
        description:
          description: Group description
          type: string
        permissions:
          description: Group permissions
          type: object
          properties:
            scope:
              description: Authorization scope for this group
              type: array
              items:
                type: string
            features:
              description: Group feature flags
              type: object
            admin:
              description: Group admin privileges
              type: boolean
            allowlist:
              description: Whether the group members can do allowlist operations within the scope
              type: boolean

    # Group members
    GroupMemberItem:
      type: object
      properties:
        email:
          description: User email
          type: string
        group_admin:
          description: Whether the user is an admin of the group
          type: boolean
        added:
          description: When the user was added to the group
          type: string
          format: date-time
    PagedGroupMemberItem:
      type: object
      required:
        - results
        - count
        - next
        - previous
      properties:
        results:
          description: One page of group members
          type: array
          items:
            $ref: "#/components/schemas/GroupMemberItem"
        count:
          description: Number of items returned
          type: integer
          format: int32
        next:
          description: Link to next page of results
          type: string
        previous:
          description: Link to the previous page of results
          type: string
    GroupMemberRequest:
      type: object
      properties:
        group_admin:
          description: Whether the user is an admin of the group
          type: boolean

    # System Allowlist
    SystemAllowlistItem:
      type: object
      required:
        - type
        - value
        - reason
      properties:
        type:
          description: System-wide allowlist item type
          type: string
          enum:
            - secret
        value:
          description: The allowlisted value
          oneOf:
            - $ref: "#/components/schemas/SystemAllowlistSecretItem"
        reason:
          description: Reason for creation
          type: string
        created_by:
          description: Autoset principal that created the item, ignored if passed in post/put requests.
          type: string
        updated_by:
          description: Autoset principal that last updated the item, ignored if passed in post/put requests
          type: string
        created:
          description: Autoset date-time the item was created, ignored if passed in post/put requests
          type: string
          format: date-time
        updated:
          description: Autoset date-time the item was last updated, ignored if passed in post/put requests
          type: string
          format: date-time
    SystemAllowlistItemWithId:
      allOf:
        - $ref: "#/components/schemas/SystemAllowlistItem"
        - type: object
          required:
            - id
          properties:
            id:
              description: ID of the allowlist item
              type: string
              format: uuid
    PagedSystemAllowlistItem:
      type: object
      required:
        - results
        - count
        - next
        - previous
      properties:
        results:
          description: One page of system-wide allowlist items
          type: array
          items:
            $ref: "#/components/schemas/SystemAllowlistItemWithId"
        count:
          description: Number of items returned
          type: integer
          format: int32
        next:
          description: Link to next page of results
          type: string
        previous:
          description: Link to the previous page of results
          type: string
    SystemAllowlistSecretItem:
      type: object
      properties:
        filename:
          description: Secret-containing filename (wildcard supported)
          type: string
        value:
          description: Secret value to ignore (wildcard supported)
          type: string

  # Reusable parameter definitions
  parameters:
    limit:
      name: limit
      in: query
      description: Limit the number of records returned to this number.
      required: false
      schema:
        type: integer
    offset:
      name: offset
      in: query
      description: The offset number to get the history from.
      required: false
      schema:
        type: integer
    name:
      name: name
      in: query
      description: Filter on the name (exact match)
      required: false
      schema:
        type: string
    name__contains:
      name: name__contains
      in: query
      description: Filter on the name (case-sensitive substring match)
      required: false
      schema:
        type: string
    name__icontains:
      name: name__icontains
      in: query
      description: Filter on the name (case-insensitive substring match)
      required: false
      schema:
        type: string
    parent:
      name: parent
      in: query
      description: Filter on the parent (exact match)
      required: false
      schema:
        type: string
    parent__contains:
      name: parent__contains
      in: query
      description: Filter on the parent (case-sensitive substring match)
      required: false
      schema:
        type: string
    parent__icontains:
      name: parent__icontains
      in: query
      description: Filter on the parent (case-insensitive substring match)
      required: false
      schema:
        type: string
    description:
      name: description
      in: query
      description: Filter on the description (exact match)
      required: false
      schema:
        type: string
    description__contains:
      name: description__contains
      in: query
      description: Filter on the description (case-sensitive substring match)
      required: false
      schema:
        type: string
    description__icontains:
      name: description__icontains
      in: query
      description: Filter on the description (case-insensitive substring match)
      required: false
      schema:
        type: string
    created:
      name: created
      in: query
      description: Filter on the created time (exact match)
      required: false
      schema:
        type: string
        format: date-time
    created__gt:
      name: created__gt
      in: query
      description: Filter on the created time (since timestamp)
      required: false
      schema:
        type: string
        format: date-time
    created__lt:
      name: created__lt
      in: query
      description: Filter on the created time (prior to timestamp)
      required: false
      schema:
        type: string
        format: date-time
    expires:
      name: expires
      in: query
      description: Filter on the expires time (exact match)
      required: false
      schema:
        type: string
        format: date-time
    expires__gt:
      name: expires__gt
      in: query
      description: Filter on the expires time (since timestamp)
      required: false
      schema:
        type: string
        format: date-time
    expires__lt:
      name: expires__lt
      in: query
      description: Filter on the expires time (prior to timestamp)
      required: false
      schema:
        type: string
        format: date-time
    id:
      name: id
      in: path
      description: ID
      required: true
      schema:
        type: string
    kid:
      name: kid
      in: path
      description: API key ID
      required: true
      schema:
        type: string
        format: uuid
    uid:
      name: uid
      in: path
      description: User email address
      required: true
      schema:
        type: string

  securitySchemes:
    x-api-key:
      type: apiKey
      description: API key
      name: x-api-key
      in: header
